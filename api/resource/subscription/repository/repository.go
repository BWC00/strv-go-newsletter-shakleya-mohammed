package repository

import (
	"context"

	"firebase.google.com/go/v4/db"
	"gorm.io/gorm"

	"github.com/bwc00/strv-go-newsletter-shakleya-mohammed/api/resource/subscription"
	"github.com/bwc00/strv-go-newsletter-shakleya-mohammed/api/resource/newsletter"
)

// Repository provides methods to interact with the data storage for subscriptions.
type Repository struct {
	postgresDB *gorm.DB
	firebaseDB *db.Ref
}

// NewRepository creates a new instance of Repository with the given database connections.
func NewRepository(postgresDB *gorm.DB, firebaseDB *db.Ref) *Repository {
	return &Repository{
		postgresDB: postgresDB,
		firebaseDB: firebaseDB,
	}
}

// ListSubscriptions returns a list of subscriptions from the Firebase database.
func (r *Repository) ListSubscriptions() (*[]subscription.Subscription, error) {
	// Get a database reference to the subscriptions.
	subscriptionsRef := r.firebaseDB.Child("subscriptions")

	// Retrieve the subscriptions from Firebase
	results, err := subscriptionsRef.OrderByKey().GetOrdered(context.Background())
	if err != nil {
	        return nil, err
	}

	// Initialize a slice to store the subscriptions
	subscriptions := make([]subscription.Subscription, len(results))

	// Convert the retrieved data into subscription objects
	for i, r := range results {
		var subscription subscription.Subscription
		if err := r.Unmarshal(&subscription); err != nil {
			return nil, err
		}
		subscriptions[i] = subscription
	}

	return &subscriptions, nil
}

// Subscribe creates a new subscription in the Firebase database.
func (r *Repository) Subscribe(SubscriptionInfo *subscription.Subscription) (string, error) {
	// Check if the newsletter exists
	if err := r.postgresDB.Where("id = ?", SubscriptionInfo.NewsletterID).First(&newsletter.Newsletter{}).Error; err != nil {
		return "", err
	}

	// Get a database reference to the subscriptions.
	subscriptionsRef := r.firebaseDB.Child("subscriptions")

	// Add the new subscription to Firebase
	newSubscriptionRef, err := subscriptionsRef.Push(context.Background(), SubscriptionInfo)
	if err != nil {
		return "", err
	}

	// Get the unique key generated by Push() as the subscription ID
	subscriptionID := newSubscriptionRef.Key

	return subscriptionID, nil
}

// Unsubscribe removes a subscription from the Firebase database.
func (r *Repository) Unsubscribe(subscriptionID string) error {
	// Get a database reference to the subscriptions.
	subscriptionRef := r.firebaseDB.Child("subscriptions").Child(subscriptionID)

	// Remove the subscription from Firebase
	err := subscriptionRef.Set(context.Background(), nil)

	return err
}